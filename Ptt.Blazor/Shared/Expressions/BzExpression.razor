@using System.Diagnostics;
@inherits LocalComponentBase

@inject UiReasoningState State

@{
    RenderFragment<RenderFragment> simple = c => @<span class="@Classes">@c</span>;

    RenderFragment<RenderFragment> full = c =>
            @<span
                class="@Classes"
                @onmouseover:stopPropagation
                @onmouseover="() => IsHovering = true"
                @onmouseout="() => IsHovering = false"
                @onclick:stopPropagation
                @onclick="OpenChooser"
            >@c</span>
    ;

    RenderFragment<RenderFragment> GetWrapper()
    {
        if (UiExpression is null) return simple;

        return full;
    }
}

<WrapperApplication Wrapper="@GetWrapper()">
    <BzExpressionContent Expression="@Expression" IsInner="@IsInner" />

    @if (UiExpression?.Annotation is UiAnnotation annotation)
    {
        <div class="@GetAnnotationClasses(annotation.IsTopOrLeft)">
            <div class="annotation-box">
                <BzChainPart Part="annotation.ChainPart" />
            </div>
        </div>
    }
    else if (IsChooserOpen)
    {
        <div class="@GetAnnotationClasses(null)">
            <div class="chooser-box">
                <BzChooserBoxContent ChainParts="ChainParts" OnSelected="HandleChoice" />
            </div>
        </div>
    }
</WrapperApplication>

@code {
    [Parameter]
    public Expression Expression { get; set; } = null!;



    [Parameter]
    public Boolean IsInner { get; set; }

    public UiExpression? UiExpression => Expression.Ui as UiExpression;

    public Boolean IsHovering { get; set; }

    public Boolean IsChooserOpen => ChainParts is not null;

    public ChainPart[]? ChainParts { get; set; }

    Int32 wrapperDummy = 0;

    String GetAnnotationClasses(Boolean? isTopOrLeft) => ClassNames(
        "annotation",
        "annotation-top".If(isTopOrLeft == true),
        "annotation-bottom".If(isTopOrLeft == false),
        "annotation-right".If(isTopOrLeft is null)
    );

    String Classes => ClassNames("expression", "position-relative", "hovering".If(IsHovering));

    public void OpenChooser()
    {
        if (UiExpression is null) return;

        State.BeginDerivation(UiExpression, CloseChooser, out var suggestions);

        ChainParts = suggestions;
    }

    void CloseChooser()
    {
        ChainParts = null;

        StateHasChanged();
    }

    void HandleChoice(ChainPart choice)
    {
        // this causes some infinite update:
        State.SetAnnotation(UiExpression!, choice);

        SetUpdateSubscription(UiExpression);

        CloseChooser();
    }
}
